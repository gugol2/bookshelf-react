{"version":3,"sources":["BooksAPI.js","Book.js","utils/utilities.js","Search.js","Bookshelf.js","Library.js","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","get","bookId","fetch","concat","then","res","json","data","book","update","shelf","id","method","Object","objectSpread","Content-Type","body","JSON","stringify","search","query","books","Book","props","moveBook","title","authors","imageLinks","react_default","a","createElement","className","style","width","height","backgroundImage","thumbnail","value","onChange","event","newShelf","target","disabled","join","filterOutBooksWithoutImages","bookList","filter","orderBooksbyName","sort","b","localeCompare","splitBooksInShelves","orderedShelvesByName","shelvesOrdered","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","_ref3","_ref2","slicedToArray","key","newValue","toConsumableArray","err","return","orderBooksbyNameInsideShelves","shelves","entries","orderShelvesByName","reduce","acc","cur","Search","_React$Component","_getPrototypeOf2","_this","classCallCheck","this","_len","arguments","length","_args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","state","booksSearched","errMessage","debounce","fn","wait","_len2","args","_key2","clearTimeout","timeout","setTimeout","assertThisInitialized","updateQuery","preventDefault","setState","trim","updateSearch","BooksAPI","error","resetBookState","console","log","msg","onMoveBook","inherits","createClass","_this2","_this$state","booksSearchedWithShelves","booksFromSearch","booksFromProps","filteredAndMergedBooks","map","searched","find","bfp","mergeBooksFromPropsWithSearchedBooks","reduceBooksSearched","react_router_dom","to","type","placeholder","Book_Book","React","Component","Bookshelf","booksInThisShelf","bookshelfName","bookshelfNameReadyString","split","charAt","toUpperCase","slice","bookshelfNameReady","bookITS","Library","_ref","Bookshelf_Bookshelf","BooksApp","shelvesUpdated","currentState","_this3","react_router","exact","path","render","Library_Library","Search_Search","ReactDOM","src_App","document","getElementById"],"mappings":"wQACMA,EAAM,wCAIRC,EAAQC,aAAaD,MACpBA,IACHA,EAAQC,aAAaD,MAAQE,KAAKC,SAASC,SAAS,IAAIC,QAAQ,IAElE,IAAMC,EAAU,CACdC,OAAU,mBACVC,cAAiBR,GAGNS,EAAM,SAACC,GAAD,OACjBC,MAAK,GAAAC,OAAIb,EAAJ,WAAAa,OAAiBF,GAAU,CAAEJ,YAC/BO,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAG,GAAI,OAAIA,EAAKC,QAOVC,EAAS,SAACD,EAAME,GAAP,OACpBR,MAAK,GAAAC,OAAIb,EAAJ,WAAAa,OAAiBK,EAAKG,IAAM,CAC/BC,OAAQ,MACRf,QAAQgB,OAAAC,EAAA,EAAAD,CAAA,GACHhB,EADE,CAELkB,eAAgB,qBAElBC,KAAMC,KAAKC,UAAU,CAAER,YACtBN,KAAK,SAAAC,GAAG,OAAIA,EAAIC,UAERa,EAAS,SAACC,GAAD,OACpBlB,MAAK,GAAAC,OAAIb,EAAJ,WAAkB,CACrBsB,OAAQ,OACRf,QAAQgB,OAAAC,EAAA,EAAAD,CAAA,GACHhB,EADE,CAELkB,eAAgB,qBAElBC,KAAMC,KAAKC,UAAU,CAAEE,YACtBhB,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAG,GAAI,OAAIA,EAAKc,wBCzCVC,EAAO,SAACC,GAAU,IACnBf,EAAmBe,EAAnBf,KAAMgB,EAAaD,EAAbC,SACNC,EAA+BjB,EAA/BiB,MAAOC,EAAwBlB,EAAxBkB,QAASC,EAAenB,EAAfmB,WAClBjB,EAAQF,EAAKE,OAAS,OAQ5B,OACIkB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACfH,EAAAC,EAAAC,cAAA,OACIC,UAAU,aACVC,MAAO,CAAEC,MAAO,IAAKC,OAAQ,IAAKC,gBAAe,OAAAhC,OAASwB,EAAWS,UAApB,QAErDR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACXH,EAAAC,EAAAC,cAAA,UAAQO,MAAO3B,EAAO4B,SAdd,SAACC,GACjB,IAAMC,EAAWD,EAAME,OAAOJ,MAE9Bb,EAASD,EAAMf,KAAMgC,KAYTZ,EAAAC,EAAAC,cAAA,UAAQO,MAAM,OAAOK,UAAQ,GAA7B,cACAd,EAAAC,EAAAC,cAAA,UAAQO,MAAM,oBAAd,qBACAT,EAAAC,EAAAC,cAAA,UAAQO,MAAM,cAAd,gBACAT,EAAAC,EAAAC,cAAA,UAAQO,MAAM,QAAd,QACAT,EAAAC,EAAAC,cAAA,UAAQO,MAAM,QAAd,WAIRT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAcN,GAC7BG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAgBL,GAAWA,EAAQiB,KAAK,iBCtBtDC,EAA8B,SAACC,GACxC,OAAOA,EAASC,OAAO,SAAAtC,GAAI,OAAIA,EAAKmB,cAGlCoB,EAAmB,SAACF,GACtB,OAAOA,EAASG,KAAK,SAACnB,EAAEoB,GAAH,OAASpB,EAAEJ,MAAMyB,cAAcD,EAAExB,UAyB7C0B,EAAsB,SAACN,GAYhC,OAlCkC,SAACO,GACnC,IAAMC,EAAiB,GADqCC,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAG5D,QAAAC,EAAAC,EAAyBP,EAAzBQ,OAAAC,cAAAP,GAAAI,EAAAC,EAAAG,QAAAC,MAAAT,GAAA,EAA+C,KAAAU,EAAAN,EAAArB,MAAA4B,EAAApD,OAAAqD,EAAA,EAAArD,CAAAmD,EAAA,GAArCG,EAAqCF,EAAA,GAAhC5B,EAAgC4B,EAAA,GACrCG,EAAQvD,OAAAwD,EAAA,EAAAxD,CAAOwB,GACrBgB,EAAec,GAAOpB,EAAiBqB,IALiB,MAAAE,GAAAf,GAAA,EAAAC,EAAAc,EAAA,YAAAhB,GAAA,MAAAK,EAAAY,QAAAZ,EAAAY,SAAA,WAAAhB,EAAA,MAAAC,GAQ5D,OAAOH,EAwBwBmB,CArBR,SAACC,GAExB,OAD6B5D,OAAO6D,QAAQD,GAASzB,KAAK,SAACnB,EAAGoB,GAAJ,OAAUpB,EAAE,GAAGqB,cAAcD,EAAE,MAkB5D0B,CAPF9B,EAASC,OAAO,SAAAtC,GAAI,MAAmB,SAAfA,EAAKE,QAErBkE,OAAO,SAACC,EAAKC,GAE5C,OADAD,EAAIC,EAAIpE,OAARG,OAAAwD,EAAA,EAAAxD,CAAqBgE,EAAIC,EAAIpE,QAAU,IAAvCP,OAAA,CAA2C2E,IACpCD,GACR,cCvCME,EAAb,SAAAC,GAAA,SAAAD,IAAA,IAAAE,EAAAC,EAAArE,OAAAsE,EAAA,EAAAtE,CAAAuE,KAAAL,GAAA,QAAAM,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,GAAA,OAAAR,EAAArE,OAAA8E,EAAA,EAAA9E,CAAAuE,MAAAH,EAAApE,OAAA+E,EAAA,EAAA/E,CAAAkE,IAAAc,KAAAC,MAAAb,EAAA,CAAAG,MAAAjF,OAAAqF,MACIO,MAAQ,CACJ3E,MAAO,GACP4E,cAAe,GACfC,WAAY,IAJpBf,EAWIgB,SAAW,SAACC,EAAIC,GACZ,OAAO,WAAa,QAAAC,EAAAf,UAAAC,OAATe,EAAS,IAAAb,MAAAY,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAATD,EAASC,GAAAjB,UAAAiB,GAGhBC,aAAatB,EAAKuB,SAClBvB,EAAKuB,QAAUC,WAHM,kBAAMP,EAAGL,MAAHjF,OAAA8F,EAAA,EAAA9F,QAAA8F,EAAA,EAAA9F,CAAAqE,IAAeoB,IAGFF,KAhBpDlB,EAoBI0B,YAAc,SAACrE,GACXA,EAAMsE,iBACN,IAAMzF,EAAQmB,EAAME,OAAOJ,MAE3B6C,EAAK4B,SACD,iBAAO,CACH1F,MAAOA,EAAM2F,OAAOxB,OAASnE,EAAQ,GACrC6E,WAAY,KAEhB,kBAAMf,EAAKgB,SAAShB,EAAK8B,aAAc,IAAjC9B,CAAsCA,EAAKa,MAAM3E,UA7BnE8D,EAiCI8B,aAAe,SAAC5F,GACTA,EACC6F,EAAgB7F,GAAOhB,KAAK,SAAA4F,GACrBA,EAAckB,OACbhC,EAAKiC,eAAe,mBACpBC,QAAQC,IAAR,iBAAAlH,OAA6B6F,EAAckB,SAG3ChC,EAAK4B,SAAS,iBAAO,CACjBd,cAAepD,EAA4BoD,QAKvDd,EAAKiC,eAAe,+CA/ChCjC,EAmDIiC,eAAiB,SAACG,GACdpC,EAAK4B,SAAS,iBAAO,CACjBd,cAAe,GACfC,WAAYqB,MAtDxBpC,EA0DI1D,SAAW,SAAChB,EAAME,GACdwE,EAAK3D,MAAMgG,WAAW/G,EAAME,IA3DpCwE,EAAA,OAAArE,OAAA2G,EAAA,EAAA3G,CAAAkE,EAAAC,GAAAnE,OAAA4G,EAAA,EAAA5G,CAAAkE,EAAA,EAAAZ,IAAA,oBAAA9B,MAAA,WAQQ+C,KAAKqB,QAAU,OARvB,CAAAtC,IAAA,SAAA9B,MAAA,WA8Dc,IAAAqF,EAAAtC,KAAAuC,EACuCvC,KAAKW,MAA1C3E,EADFuG,EACEvG,MAAO4E,EADT2B,EACS3B,cAAeC,EADxB0B,EACwB1B,WAExB2B,EDtCqB,SAACC,EAAiBC,GACjD,IAAMC,EAlCmC,SAACF,EAAiBC,GAK3D,OAJqBD,EAAgBG,IAAI,SAAAC,GACrC,OAAOH,EAAeI,KAAK,SAAAC,GAAG,OAAIA,EAAIxH,KAAOsH,EAAStH,MAAOsH,IAgClCG,CAAqCP,EAAiBC,GAErF,OAAO/E,EAAiBgF,GCmCaM,CAAoBrC,EADnCZ,KAAK7D,MAAfF,OAGR,OACIO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACXH,EAAAC,EAAAC,cAACwG,EAAA,EAAD,CACIvG,UAAU,eACVwG,GAAG,KAFP,SAKA3G,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BASXH,EAAAC,EAAAC,cAAA,SACI0G,KAAK,OACLC,YAAY,4BACZpG,MAAOjB,EACPkB,SAAU8C,KAAKwB,gBAM3BhF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cACT6F,EAAyBI,IAAI,SAAAxH,GAAI,OAC9BoB,EAAAC,EAAAC,cAAA,MAAIqC,IAAK3D,EAAKG,IACViB,EAAAC,EAAAC,cAAC4G,EAAD,CACIlI,KAAMA,EACNgB,SAAUkG,EAAKlG,gBAMlCyE,GAAerE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBAC1BkE,QA3GrBlB,EAAA,CAA4B4D,IAAMC,WCHrBC,EAAY,SAACtH,GAAU,IACxBuH,EAAoCvH,EAApCuH,iBAAkBC,EAAkBxH,EAAlBwH,cAOpBvH,EAAW,SAAChB,EAAME,GACpBa,EAAMC,SAAShB,EAAME,IAGzB,OACIkB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAXK,WACvB,IAAMiH,EAA2BD,EAAcE,MAAM,aAAatG,KAAK,KACvE,SAAAxC,OAAU6I,EAAyBE,OAAO,GAAGC,eAA7ChJ,OAA6D6I,EAAyBI,MAAM,IASvDC,IACjCzH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cACT+G,EAAiBd,IAAI,SAAAsB,GAAO,OACzB1H,EAAAC,EAAAC,cAAA,MAAIqC,IAAKmF,EAAQ3I,IACbiB,EAAAC,EAAAC,cAAC4G,EAAD,CACIlI,KAAM8I,EACN9H,SAAUA,WCnB7B+H,EAAU,SAAChI,GACpB,IAAMkD,EAAUtB,EAAoB5B,EAAMF,OAEpCG,EAAW,SAAChB,EAAME,GACpBa,EAAMgG,WAAW/G,EAAME,IAG3B,OACIkB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACXH,EAAAC,EAAAC,cAAA,8BAGJF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACXH,EAAAC,EAAAC,cAAA,WACKjB,OAAO6D,QAAQD,GAASuD,IAAI,SAAAwB,GAAA,IAAAvF,EAAApD,OAAAqD,EAAA,EAAArD,CAAA2I,EAAA,GAAErF,EAAFF,EAAA,GAAO5B,EAAP4B,EAAA,UACzBrC,EAAAC,EAAAC,cAAC2H,EAAD,CACIV,cAAe5E,EACf2E,iBAAkBzG,EAClB8B,IAAKA,EACL3C,SAAUA,QAM1BI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAACwG,EAAA,EAAD,CAAMC,GAAG,WACL3G,EAAAC,EAAAC,cAAA,uCCwBL4H,6MAjDb3D,MAAQ,CAON1E,MAAO,MAWTG,SAAW,SAAChB,EAAME,GAChBuG,EAAgBzG,EAAME,GAAON,KAAK,SAAAuJ,GAChC1C,EAAazG,EAAKG,IAAIP,KAAK,SAAAI,GACzB0E,EAAK4B,SAAS,SAAC8C,GAAD,MAAmB,CAC/BvI,MAAMR,OAAAwD,EAAA,EAAAxD,CAAK+I,EAAavI,MAAMyB,OAAO,SAAAG,GAAC,OAAIA,EAAEtC,KAAOH,EAAKG,MAAnDR,OAAA,CAAwDK,+FAZhD,IAAAkH,EAAAtC,KNErBlF,MAAK,GAAAC,OAAIb,EAAJ,UAAiB,CAAEO,YACrBO,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAG,GAAI,OAAIA,EAAKc,QMHDjB,KAAK,SAACiB,GACtBqG,EAAKZ,SAAS,iBAAO,CACnBzF,8CAeG,IAAAwI,EAAAzE,KACP,OACExD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACgI,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,OAAQ,kBAC5BrI,EAAAC,EAAAC,cAACoI,EAAD,CACE3C,WAAYsC,EAAKrI,SACjBH,MAAOwI,EAAK9D,MAAM1E,WAItBO,EAAAC,EAAAC,cAACgI,EAAA,EAAD,CAAOE,KAAK,UAAUC,OAAQ,kBAC5BrI,EAAAC,EAAAC,cAACqI,EAAD,CACE5C,WAAYsC,EAAKrI,SACjBH,MAAOwI,EAAK9D,MAAM1E,mBA1CPsH,IAAMC,iBCD7BwB,IAASH,OACLrI,EAAAC,EAAAC,cAACwG,EAAA,EAAD,KACI1G,EAAAC,EAAAC,cAACuI,EAAD,OAEFC,SAASC,eAAe","file":"static/js/main.64be079e.chunk.js","sourcesContent":["\nconst api = \"https://reactnd-books-api.udacity.com\"\n\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token\nif (!token)\n  token = localStorage.token = Math.random().toString(36).substr(-8)\n\nconst headers = {\n  'Accept': 'application/json',\n  'Authorization': token\n}\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then(res => res.json())\n    .then(data => data.book)\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then(res => res.json())\n    .then(data => data.books)\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: 'PUT',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ shelf })\n  }).then(res => res.json())\n\nexport const search = (query) =>\n  fetch(`${api}/search`, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ query })\n  }).then(res => res.json())\n    .then(data => data.books)\n","import React from 'react';\n\nexport const Book = (props) => {\n    const { book, moveBook } = props;\n    const { title, authors, imageLinks } = book;\n    const shelf = book.shelf || 'none';\n\n    const changeShelf = (event) => {\n        const newShelf = event.target.value;\n\n        moveBook(props.book, newShelf);\n    }\n\n    return (\n        <div className=\"book\">\n            <div className=\"book-top\">\n            <div \n                className=\"book-cover\" \n                style={{ width: 128, height: 193, backgroundImage: `url(${imageLinks.thumbnail})` }}>\n            </div>\n            <div className=\"book-shelf-changer\">\n                <select value={shelf} onChange={changeShelf} >\n                    <option value=\"move\" disabled>Move to...</option>\n                    <option value=\"currentlyReading\">Currently Reading</option>\n                    <option value=\"wantToRead\">Want to Read</option>\n                    <option value=\"read\">Read</option>\n                    <option value=\"none\">None</option>\n                </select>\n            </div>\n            </div>\n            <div className=\"book-title\">{title}</div>\n            <div className=\"book-authors\">{authors && authors.join(', ')}</div>\n        </div>\n    )\n}\n","const mergeBooksFromPropsWithSearchedBooks = (booksFromSearch, booksFromProps) => {\n    const shelvedBooks = booksFromSearch.map(searched => {\n        return booksFromProps.find(bfp => bfp.id === searched.id) || searched;\n    });\n\n    return shelvedBooks;\n\n}\n\nexport const filterOutBooksWithoutImages = (bookList) => {\n    return bookList.filter(book => book.imageLinks);\n} \n\nconst orderBooksbyName = (bookList) => {\n    return bookList.sort((a,b) => a.title.localeCompare(b.title));\n}\n\nconst orderBooksbyNameInsideShelves = (orderedShelvesByName) => {\n    const shelvesOrdered = {};\n\n    for (let [key, value] of orderedShelvesByName) {\n        const newValue = [...value];\n        shelvesOrdered[key] = orderBooksbyName(newValue);\n    }\n\n    return shelvesOrdered;\n}\n\nconst orderShelvesByName = (shelves) => {\n    const orderedShelvesByName = Object.entries(shelves).sort((a, b) => a[0].localeCompare(b[0]));\n    return orderedShelvesByName;\n}\n\nexport const reduceBooksSearched = (booksFromSearch, booksFromProps) => {\n    const filteredAndMergedBooks = mergeBooksFromPropsWithSearchedBooks(booksFromSearch, booksFromProps);\n\n    return orderBooksbyName(filteredAndMergedBooks);\n}\n\nexport const splitBooksInShelves = (bookList) => {\n    const booksWithNoneShelf = bookList.filter(book => book.shelf !== 'none');\n\n    const shelves = booksWithNoneShelf.reduce((acc, cur) => {\n        acc[cur.shelf] = [...acc[cur.shelf] || [], cur];\n        return acc\n    }, {});\n    \n    const orderedShelvesByName = orderShelvesByName(shelves);\n\n    const shelvesAndBooksOrdered = orderBooksbyNameInsideShelves(orderedShelvesByName);\n\n    return shelvesAndBooksOrdered;\n} \n","import React from 'react';\nimport { Book } from './Book';\nimport * as BooksAPI from './BooksAPI';\nimport { reduceBooksSearched, filterOutBooksWithoutImages } from \"./utils/utilities\";\nimport { Link } from 'react-router-dom';\n\nexport class Search extends React.Component {\n    state = {\n        query: '',\n        booksSearched: [],\n        errMessage: ''\n    }\n\n    componentDidMount() {\n        this.timeout = null;\n    }\n\n    debounce = (fn, wait) => {\n        return (...args) => {\n            const functionCall = () => fn.apply(this, args);\n        \n            clearTimeout(this.timeout);\n            this.timeout = setTimeout(functionCall, wait);\n        }\n    }\n\n    updateQuery = (event) => {\n        event.preventDefault();\n        const query = event.target.value;\n\n        this.setState(\n            () => ({\n                query: query.trim().length ? query : '',\n                errMessage: ''\n            }),\n            () => this.debounce(this.updateSearch, 500)(this.state.query)\n        );\n    }\n\n    updateSearch = (query) => {\n        if(query){\n            BooksAPI.search(query).then(booksSearched => {\n                if(booksSearched.error) {\n                    this.resetBookState('No books found!');\n                    console.log(`The error is: ${booksSearched.error}`);\n                } else {\n                    \n                    this.setState(() => ({\n                        booksSearched: filterOutBooksWithoutImages(booksSearched)\n                    }));\n                }\n            });\n        } else {\n            this.resetBookState('Just type something and I will do my best!');\n        }\n    }\n\n    resetBookState = (msg) => {\n        this.setState(() => ({\n            booksSearched: [],\n            errMessage: msg\n        })); \n    }\n\n    moveBook = (book, shelf) => {\n        this.props.onMoveBook(book, shelf);\n    }\n\n    render () {\n        const { query, booksSearched, errMessage } = this.state;\n        const { books } = this.props;\n        const booksSearchedWithShelves = reduceBooksSearched(booksSearched, books);\n\n        return (\n            <div className=\"search-books\">\n                <div className=\"search-books-bar\">\n                    <Link \n                        className=\"close-search\" \n                        to='/'\n                    >Close</Link>\n\n                    <div className=\"search-books-input-wrapper\">\n                        {/*\n                            NOTES: The search from BooksAPI is limited to a particular set of search terms.\n                            You can find these search terms here:\n                            https://github.com/gugol2/bookshelf-react/blob/master/SEARCH_TERMS.md\n    \n                            However, remember that the BooksAPI.search method DOES search by title or author. So, don't worry if\n                            you don't find a specific author or title. Every search is limited by search terms.\n                        */}\n                        <input \n                            type=\"text\" \n                            placeholder=\"Search by title or author\"\n                            value={query}\n                            onChange={this.updateQuery}  \n                        />\n                        {/* {JSON.stringify(query)} */}\n    \n                    </div>\n                </div>\n                <div className=\"search-books-results\">\n                    <ol className=\"books-grid\">\n                        {booksSearchedWithShelves.map(book => (\n                            <li key={book.id}>\n                                <Book \n                                    book={book}\n                                    moveBook={this.moveBook}\n                                />\n                            </li>\n                        ))}\n                    </ol>\n                </div>\n                {errMessage && (<div className='search-books-error'>\n                    {errMessage}\n                </div>)}\n            </div>\n        )\n    }\n}","import React from 'react';\nimport { Book } from './Book';\n\nexport const Bookshelf = (props) => {\n    const { booksInThisShelf, bookshelfName } = props;\n\n    const bookshelfNameReady = () => {\n        const bookshelfNameReadyString = bookshelfName.split(/(?=[A-Z])/).join(' ');\n        return `${bookshelfNameReadyString.charAt(0).toUpperCase()}${bookshelfNameReadyString.slice(1)}`;\n    }\n\n    const moveBook = (book, shelf) => {\n        props.moveBook(book, shelf);\n    }\n\n    return (\n        <div className=\"bookshelf\">\n            <h2 className=\"bookshelf-title\">{bookshelfNameReady()}</h2>\n            <div className=\"bookshelf-books\">\n                <ol className=\"books-grid\">\n                    {booksInThisShelf.map(bookITS => (\n                        <li key={bookITS.id}>\n                            <Book \n                                book={bookITS}\n                                moveBook={moveBook}\n                            />\n                        </li>\n                    ))}\n                </ol>\n            </div>\n        </div>\n    )\n}","import React from 'react';\nimport { Bookshelf } from './Bookshelf';\nimport { splitBooksInShelves } from \"./utils/utilities\";\nimport { Link } from 'react-router-dom';\n\nexport const Library = (props) => {\n    const shelves = splitBooksInShelves(props.books);\n\n    const moveBook = (book, shelf) => {\n        props.onMoveBook(book, shelf);\n    }\n    \n    return (\n        <div className=\"list-books\">\n            <div className=\"list-books-title\">\n                <h1>Bookshelf React</h1>\n            </div>\n\n            <div className=\"list-books-content\">\n                <div>\n                    {Object.entries(shelves).map(([key, value]) => (\n                        <Bookshelf \n                            bookshelfName={key}\n                            booksInThisShelf={value}\n                            key={key}\n                            moveBook={moveBook}\n                        />\n                    ))}\n                </div>\n            </div>\n\n            <div className=\"open-search\">\n                <Link to='/search'>\n                    <button>Add a book</button>\n                </Link>\n            </div>\n        </div>\n    )\n}","import React from 'react'\nimport * as BooksAPI from './BooksAPI';\nimport './App.css'\nimport { Search } from './Search';\nimport { Library } from './Library';\nimport { Route } from 'react-router-dom';\n\nclass BooksApp extends React.Component {\n  state = {\n    /**\n     * TODO: Instead of using this state variable to keep track of which page\n     * we're on, use the URL in the browser's address bar. This will ensure that\n     * users can use the browser's back and forward buttons to navigate between\n     * pages, as well as provide a good URL they can bookmark and share.\n     */\n    books: []\n  }\n\n  componentDidMount () {\n    BooksAPI.getAll().then((books) => {\n      this.setState(() => ({\n        books\n      }))\n    })\n  }\n\n  moveBook = (book, shelf) => {\n    BooksAPI.update(book, shelf).then(shelvesUpdated => {\n      BooksAPI.get(book.id).then(book => {\n        this.setState((currentState) => ({\n          books: [...currentState.books.filter(b => b.id !== book.id), book]\n        }));\n      });\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <Route exact path='/' render={()=> (\n          <Library \n            onMoveBook={this.moveBook}\n            books={this.state.books}\n          />\n        )} />\n\n        <Route path='/search' render={()=> (\n          <Search \n            onMoveBook={this.moveBook}\n            books={this.state.books}\n          />\n        )} />\n      </div>\n    )\n  }\n}\n\nexport default BooksApp\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport { HashRouter } from \"react-router-dom\";\n\nReactDOM.render(\n    <HashRouter>\n        <App />\n    </HashRouter>\n    , document.getElementById('root'))\n"],"sourceRoot":""}
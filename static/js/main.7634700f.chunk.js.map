{"version":3,"sources":["BooksAPI.js","Book.js","utils/utilities.js","Search.js","Bookshelf.js","Library.js","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","get","bookId","fetch","concat","then","res","json","data","book","update","shelf","id","method","Object","objectSpread","Content-Type","body","JSON","stringify","search","query","books","Book","_React$Component","_getPrototypeOf2","_this","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","state","props","changeShelf","event","preventDefault","newShelf","target","value","setState","moveBook","inherits","createClass","key","_this$props$book","title","authors","imageLinks","react_default","a","createElement","className","style","width","height","backgroundImage","thumbnail","onChange","disabled","join","React","Component","orderBooksbyName","bookList","sort","b","localeCompare","reduceBooksSearched","booksFromSearch","booksFromProps","filteredAndMergedBooks","map","searched","find","bfp","mergeBooksFromPropsWithSearchedBooks","filter","splitBooksInShelves","orderedShelvesByName","shelvesOrdered","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","_ref3","_ref2","slicedToArray","newValue","toConsumableArray","err","return","orderBooksbyNameInsideShelves","shelves","entries","orderShelvesByName","reduce","acc","cur","Search","_args","booksSearched","errMessage","debounce","fn","wait","_len2","_key2","clearTimeout","timeout","setTimeout","assertThisInitialized","updateQuery","trim","updateSearch","BooksAPI","error","resetBookState","console","log","currentState","msg","onMoveBook","_this2","_this$state","react_router_dom","to","type","placeholder","Book_Book","Bookshelf","booksInThisShelf","bookshelfName","bookshelfNameReadyString","split","charAt","toUpperCase","slice","bookshelfNameReady","bookITS","Library","_ref","Bookshelf_Bookshelf","BooksApp","shelvesUpdated","_this3","react_router","exact","path","render","Library_Library","Search_Search","ReactDOM","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.7634700f.chunk.js","sourcesContent":["\nconst api = \"https://reactnd-books-api.udacity.com\"\n\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token\nif (!token)\n  token = localStorage.token = Math.random().toString(36).substr(-8)\n\nconst headers = {\n  'Accept': 'application/json',\n  'Authorization': token\n}\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then(res => res.json())\n    .then(data => data.book)\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then(res => res.json())\n    .then(data => data.books)\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: 'PUT',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ shelf })\n  }).then(res => res.json())\n\nexport const search = (query) =>\n  fetch(`${api}/search`, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ query })\n  }).then(res => res.json())\n    .then(data => data.books)\n","import React from 'react';\n\nexport class Book extends React.Component {\n    state = {\n        shelf: this.props.book.shelf || 'none'\n    }\n\n    changeShelf = (event) => {\n        event.preventDefault();\n        const newShelf = event.target.value;\n\n        this.setState(() => ({\n            shelf: newShelf\n        }));\n\n        this.props.moveBook(this.props.book, newShelf);\n    }\n\n    render() {\n        const { title, authors, imageLinks } = this.props.book;\n\n        return (\n            <div className=\"book\">\n                <div className=\"book-top\">\n                <div \n                    className=\"book-cover\" \n                    style={{ width: 128, height: 193, backgroundImage: `url(${imageLinks.thumbnail})` }}>\n                </div>\n                <div className=\"book-shelf-changer\">\n                    <select value={this.state.shelf} onChange={this.changeShelf} >\n                        <option value=\"move\" disabled>Move to...</option>\n                        <option value=\"currentlyReading\">Currently Reading</option>\n                        <option value=\"wantToRead\">Want to Read</option>\n                        <option value=\"read\">Read</option>\n                        <option value=\"none\">None</option>\n                    </select>\n                </div>\n                </div>\n                <div className=\"book-title\">{title}</div>\n                <div className=\"book-authors\">{authors && authors.join(', ')}</div>\n            </div>\n        )\n    }\n}\n","const mergeBooksFromPropsWithSearchedBooks = (booksFromSearch, booksFromProps) => {\n    const shelvedBooks = booksFromSearch.map(searched => {\n        return booksFromProps.find(bfp => bfp.id === searched.id) || searched;\n    });\n\n    return shelvedBooks;\n\n}\n\nconst filterOutBooksWithoutImages = (bookList) => {\n    return bookList.filter(book => book.imageLinks);\n} \n\nconst orderBooksbyName = (bookList) => {\n    return bookList.sort((a,b) => a.title.localeCompare(b.title));\n}\n\nconst orderBooksbyNameInsideShelves = (orderedShelvesByName) => {\n    const shelvesOrdered = {};\n\n    for (let [key, value] of orderedShelvesByName) {\n        const newValue = [...value];\n        shelvesOrdered[key] = orderBooksbyName(newValue);\n    }\n\n    return shelvesOrdered;\n}\n\nconst orderShelvesByName = (shelves) => {\n    const orderedShelvesByName = Object.entries(shelves).sort((a, b) => a[0].localeCompare(b[0]));\n    return orderedShelvesByName;\n}\n\nexport const reduceBooksSearched = (booksFromSearch, booksFromProps) => {\n    const filteredBooks = filterOutBooksWithoutImages(booksFromSearch);\n    const filteredAndMergedBooks = mergeBooksFromPropsWithSearchedBooks(filteredBooks, booksFromProps);\n\n    return orderBooksbyName(filteredAndMergedBooks);\n}\n\nexport const splitBooksInShelves = (bookList) => {\n    const booksWithNoneShelf = bookList.filter(book => book.shelf !== 'none');\n\n    const shelves = booksWithNoneShelf.reduce((acc, cur) => {\n        acc[cur.shelf] = [...acc[cur.shelf] || [], cur];\n        return acc\n    }, {});\n    \n    const orderedShelvesByName = orderShelvesByName(shelves);\n\n    const shelvesAndBooksOrdered = orderBooksbyNameInsideShelves(orderedShelvesByName);\n\n    return shelvesAndBooksOrdered;\n} \n","import React from 'react';\nimport { Book } from './Book';\nimport * as BooksAPI from './BooksAPI';\nimport { reduceBooksSearched } from \"./utils/utilities\";\nimport { Link } from 'react-router-dom';\n\nexport class Search extends React.Component {\n    state = {\n        query: '',\n        booksSearched: [],\n        errMessage: ''\n    }\n\n    componentDidMount() {\n        this.timeout = null;\n    }\n\n    debounce = (fn, wait) => {\n        return (...args) => {\n            const functionCall = () => fn.apply(this, args);\n        \n            clearTimeout(this.timeout);\n            this.timeout = setTimeout(functionCall, wait);\n        }\n    }\n\n    updateQuery = (event) => {\n        event.preventDefault();\n        const query = event.target.value;\n\n        this.setState(\n            () => ({\n                query: query.trim().length ? query : '',\n                errMessage: ''\n            }),\n            () => this.debounce(this.updateSearch, 500)(this.state.query)\n        );\n    }\n\n    updateSearch = (query) => {\n        if(query){\n            BooksAPI.search(query).then(booksSearched => {\n                if(booksSearched.error) {\n                    this.resetBookState('No books found!');\n                    console.log(`The error is: ${booksSearched.error}`);\n                } else {\n                    \n                    this.setState((currentState, props) => {\n                        const booksReady = reduceBooksSearched(booksSearched, props.books);\n                        return { \n                            booksSearched: booksReady\n                        }\n                    });\n                }\n            });\n        } else {\n            this.resetBookState('Just type something and I will do my best!');\n        }\n    }\n\n    resetBookState = (msg) => {\n        this.setState(() => ({\n            booksSearched: [],\n            errMessage: msg\n        })); \n    }\n\n    moveBook = (book, shelf) => {\n        this.props.onMoveBook(book, shelf);\n    }\n\n    render () {\n        const { query, booksSearched, errMessage } = this.state;\n\n        return (\n            <div className=\"search-books\">\n                <div className=\"search-books-bar\">\n                    <Link \n                        className=\"close-search\" \n                        to='/'\n                    >Close</Link>\n\n                    <div className=\"search-books-input-wrapper\">\n                        {/*\n                            NOTES: The search from BooksAPI is limited to a particular set of search terms.\n                            You can find these search terms here:\n                            https://github.com/gugol2/bookshelf-react/blob/master/SEARCH_TERMS.md\n    \n                            However, remember that the BooksAPI.search method DOES search by title or author. So, don't worry if\n                            you don't find a specific author or title. Every search is limited by search terms.\n                        */}\n                        <input \n                            type=\"text\" \n                            placeholder=\"Search by title or author\"\n                            value={query}\n                            onChange={this.updateQuery}  \n                        />\n                        {/* {JSON.stringify(query)} */}\n    \n                    </div>\n                </div>\n                <div className=\"search-books-results\">\n                    <ol className=\"books-grid\">\n                        {booksSearched.map(book => (\n                            <li key={book.id}>\n                                <Book \n                                    book={book}\n                                    moveBook={this.moveBook}\n                                />\n                            </li>\n                        ))}\n                    </ol>\n                </div>\n                {errMessage && (<div className='search-books-error'>\n                    {errMessage}\n                </div>)}\n            </div>\n        )\n    }\n}","import React from 'react';\nimport { Book } from './Book';\n\nexport const Bookshelf = (props) => {\n    const { booksInThisShelf, bookshelfName } = props;\n\n    const bookshelfNameReady = () => {\n        const bookshelfNameReadyString = bookshelfName.split(/(?=[A-Z])/).join(' ');\n        return `${bookshelfNameReadyString.charAt(0).toUpperCase()}${bookshelfNameReadyString.slice(1)}`;\n    }\n\n    const moveBook = (book, shelf) => {\n        props.moveBook(book, shelf);\n    }\n\n    return (\n        <div className=\"bookshelf\">\n            <h2 className=\"bookshelf-title\">{bookshelfNameReady()}</h2>\n            <div className=\"bookshelf-books\">\n                <ol className=\"books-grid\">\n                    {booksInThisShelf.map(bookITS => (\n                        <li key={bookITS.id}>\n                            <Book \n                                book={bookITS}\n                                moveBook={moveBook}\n                            />\n                        </li>\n                    ))}\n                </ol>\n            </div>\n        </div>\n    )\n}","import React from 'react';\nimport { Bookshelf } from './Bookshelf';\nimport { splitBooksInShelves } from \"./utils/utilities\";\nimport { Link } from 'react-router-dom';\n\nexport const Library = (props) => {\n    const shelves = splitBooksInShelves(props.books);\n\n    const moveBook = (book, shelf) => {\n        props.onMoveBook(book, shelf);\n    }\n    \n    return (\n        <div className=\"list-books\">\n            <div className=\"list-books-title\">\n                <h1>Bookshelf React</h1>\n            </div>\n\n            <div className=\"list-books-content\">\n                <div>\n                    {Object.entries(shelves).map(([key, value]) => (\n                        <Bookshelf \n                            bookshelfName={key}\n                            booksInThisShelf={value}\n                            key={key}\n                            moveBook={moveBook}\n                        />\n                    ))}\n                </div>\n            </div>\n\n            <div className=\"open-search\">\n                <Link to='/search'>\n                    <button>Add a book</button>\n                </Link>\n            </div>\n        </div>\n    )\n}","import React from 'react'\nimport * as BooksAPI from './BooksAPI';\nimport './App.css'\nimport { Search } from './Search';\nimport { Library } from './Library';\nimport { Route } from 'react-router-dom';\n\nclass BooksApp extends React.Component {\n  state = {\n    /**\n     * TODO: Instead of using this state variable to keep track of which page\n     * we're on, use the URL in the browser's address bar. This will ensure that\n     * users can use the browser's back and forward buttons to navigate between\n     * pages, as well as provide a good URL they can bookmark and share.\n     */\n    books: []\n  }\n\n  componentDidMount () {\n    BooksAPI.getAll().then((books) => {\n      this.setState(() => ({\n        books\n      }))\n    })\n  }\n\n  moveBook = (book, shelf) => {\n    BooksAPI.update(book, shelf).then(shelvesUpdated => {\n      BooksAPI.get(book.id).then(book => {\n        this.setState((currentState) => ({\n          books: [...currentState.books.filter(b => b.id !== book.id), book]\n        }));\n      });\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <Route exact path='/' render={()=> (\n          <Library \n            onMoveBook={this.moveBook}\n            books={this.state.books}\n          />\n        )} />\n\n        <Route path='/search' render={()=> (\n          <Search \n            onMoveBook={this.moveBook}\n            books={this.state.books}\n          />\n        )} />\n      </div>\n    )\n  }\n}\n\nexport default BooksApp\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport { HashRouter } from \"react-router-dom\";\n\nReactDOM.render(\n    <HashRouter>\n        <App />\n    </HashRouter>\n    , document.getElementById('root'))\n"],"sourceRoot":""}